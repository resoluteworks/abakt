[{"name":"class AuthPolicyPrincipalTest<Principal : Any>(policy: AuthorizationPolicy<Principal>, principal: Principal)","description":"abakt.test.AuthPolicyPrincipalTest","location":"abakt-test/abakt.test/-auth-policy-principal-test/index.html","searchKeys":["AuthPolicyPrincipalTest","class AuthPolicyPrincipalTest<Principal : Any>(policy: AuthorizationPolicy<Principal>, principal: Principal)","abakt.test.AuthPolicyPrincipalTest"]},{"name":"class AuthPolicyResourceTest<Principal : Any, Resource : Any>(policy: AuthorizationPolicy<Principal>, resource: Resource)","description":"abakt.test.AuthPolicyResourceTest","location":"abakt-test/abakt.test/-auth-policy-resource-test/index.html","searchKeys":["AuthPolicyResourceTest","class AuthPolicyResourceTest<Principal : Any, Resource : Any>(policy: AuthorizationPolicy<Principal>, resource: Resource)","abakt.test.AuthPolicyResourceTest"]},{"name":"class ResourcePolicyPrincipalTest<Principal : Any, Resource : Any>(policy: ResourcePolicy<Principal, Resource>, principal: Principal)","description":"abakt.test.ResourcePolicyPrincipalTest","location":"abakt-test/abakt.test/-resource-policy-principal-test/index.html","searchKeys":["ResourcePolicyPrincipalTest","class ResourcePolicyPrincipalTest<Principal : Any, Resource : Any>(policy: ResourcePolicy<Principal, Resource>, principal: Principal)","abakt.test.ResourcePolicyPrincipalTest"]},{"name":"class ResourcePolicyResourceTest<Principal : Any, Resource : Any>(policy: ResourcePolicy<Principal, Resource>, resource: Resource)","description":"abakt.test.ResourcePolicyResourceTest","location":"abakt-test/abakt.test/-resource-policy-resource-test/index.html","searchKeys":["ResourcePolicyResourceTest","class ResourcePolicyResourceTest<Principal : Any, Resource : Any>(policy: ResourcePolicy<Principal, Resource>, resource: Resource)","abakt.test.ResourcePolicyResourceTest"]},{"name":"constructor(policy: AuthorizationPolicy<Principal>, principal: Principal)","description":"abakt.test.AuthPolicyPrincipalTest.AuthPolicyPrincipalTest","location":"abakt-test/abakt.test/-auth-policy-principal-test/-auth-policy-principal-test.html","searchKeys":["AuthPolicyPrincipalTest","constructor(policy: AuthorizationPolicy<Principal>, principal: Principal)","abakt.test.AuthPolicyPrincipalTest.AuthPolicyPrincipalTest"]},{"name":"constructor(policy: AuthorizationPolicy<Principal>, resource: Resource)","description":"abakt.test.AuthPolicyResourceTest.AuthPolicyResourceTest","location":"abakt-test/abakt.test/-auth-policy-resource-test/-auth-policy-resource-test.html","searchKeys":["AuthPolicyResourceTest","constructor(policy: AuthorizationPolicy<Principal>, resource: Resource)","abakt.test.AuthPolicyResourceTest.AuthPolicyResourceTest"]},{"name":"constructor(policy: ResourcePolicy<Principal, Resource>, principal: Principal)","description":"abakt.test.ResourcePolicyPrincipalTest.ResourcePolicyPrincipalTest","location":"abakt-test/abakt.test/-resource-policy-principal-test/-resource-policy-principal-test.html","searchKeys":["ResourcePolicyPrincipalTest","constructor(policy: ResourcePolicy<Principal, Resource>, principal: Principal)","abakt.test.ResourcePolicyPrincipalTest.ResourcePolicyPrincipalTest"]},{"name":"constructor(policy: ResourcePolicy<Principal, Resource>, resource: Resource)","description":"abakt.test.ResourcePolicyResourceTest.ResourcePolicyResourceTest","location":"abakt-test/abakt.test/-resource-policy-resource-test/-resource-policy-resource-test.html","searchKeys":["ResourcePolicyResourceTest","constructor(policy: ResourcePolicy<Principal, Resource>, resource: Resource)","abakt.test.ResourcePolicyResourceTest.ResourcePolicyResourceTest"]},{"name":"fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.shouldAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","description":"abakt.test.shouldAllow","location":"abakt-test/abakt.test/should-allow.html","searchKeys":["shouldAllow","fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.shouldAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","abakt.test.shouldAllow"]},{"name":"fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.shouldDeny(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","description":"abakt.test.shouldDeny","location":"abakt-test/abakt.test/should-deny.html","searchKeys":["shouldDeny","fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.shouldDeny(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","abakt.test.shouldDeny"]},{"name":"fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.shouldNotAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","description":"abakt.test.shouldNotAllow","location":"abakt-test/abakt.test/should-not-allow.html","searchKeys":["shouldNotAllow","fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.shouldNotAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","abakt.test.shouldNotAllow"]},{"name":"fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.withResource(resource: Resource, block: AuthPolicyResourceTest<Principal, Resource>.() -> Unit)","description":"abakt.test.withResource","location":"abakt-test/abakt.test/with-resource.html","searchKeys":["withResource","fun <Principal : Any, Resource : Any> AuthorizationPolicy<Principal>.withResource(resource: Resource, block: AuthPolicyResourceTest<Principal, Resource>.() -> Unit)","abakt.test.withResource"]},{"name":"fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.shouldAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","description":"abakt.test.shouldAllow","location":"abakt-test/abakt.test/should-allow.html","searchKeys":["shouldAllow","fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.shouldAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","abakt.test.shouldAllow"]},{"name":"fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.shouldDeny(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","description":"abakt.test.shouldDeny","location":"abakt-test/abakt.test/should-deny.html","searchKeys":["shouldDeny","fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.shouldDeny(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","abakt.test.shouldDeny"]},{"name":"fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.shouldNotAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","description":"abakt.test.shouldNotAllow","location":"abakt-test/abakt.test/should-not-allow.html","searchKeys":["shouldNotAllow","fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.shouldNotAllow(principal: Principal, resource: Resource, vararg actions: ResourceAction<Resource>)","abakt.test.shouldNotAllow"]},{"name":"fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.withPrincipal(principal: Principal, block: ResourcePolicyPrincipalTest<Principal, Resource>.() -> Unit)","description":"abakt.test.withPrincipal","location":"abakt-test/abakt.test/with-principal.html","searchKeys":["withPrincipal","fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.withPrincipal(principal: Principal, block: ResourcePolicyPrincipalTest<Principal, Resource>.() -> Unit)","abakt.test.withPrincipal"]},{"name":"fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.withResource(resource: Resource, block: ResourcePolicyResourceTest<Principal, Resource>.() -> Unit)","description":"abakt.test.withResource","location":"abakt-test/abakt.test/with-resource.html","searchKeys":["withResource","fun <Principal : Any, Resource : Any> ResourcePolicy<Principal, Resource>.withResource(resource: Resource, block: ResourcePolicyResourceTest<Principal, Resource>.() -> Unit)","abakt.test.withResource"]},{"name":"fun <Principal : Any> AuthorizationPolicy<Principal>.withPrincipal(principal: Principal, block: AuthPolicyPrincipalTest<Principal>.() -> Unit)","description":"abakt.test.withPrincipal","location":"abakt-test/abakt.test/with-principal.html","searchKeys":["withPrincipal","fun <Principal : Any> AuthorizationPolicy<Principal>.withPrincipal(principal: Principal, block: AuthPolicyPrincipalTest<Principal>.() -> Unit)","abakt.test.withPrincipal"]},{"name":"infix fun <Resource : Any> ResourceAction<Resource>.shouldBeAllowedOn(resource: Resource)","description":"abakt.test.AuthPolicyPrincipalTest.shouldBeAllowedOn","location":"abakt-test/abakt.test/-auth-policy-principal-test/should-be-allowed-on.html","searchKeys":["shouldBeAllowedOn","infix fun <Resource : Any> ResourceAction<Resource>.shouldBeAllowedOn(resource: Resource)","abakt.test.AuthPolicyPrincipalTest.shouldBeAllowedOn"]},{"name":"infix fun <Resource : Any> ResourceAction<Resource>.shouldBeDeniedOn(resource: Resource)","description":"abakt.test.AuthPolicyPrincipalTest.shouldBeDeniedOn","location":"abakt-test/abakt.test/-auth-policy-principal-test/should-be-denied-on.html","searchKeys":["shouldBeDeniedOn","infix fun <Resource : Any> ResourceAction<Resource>.shouldBeDeniedOn(resource: Resource)","abakt.test.AuthPolicyPrincipalTest.shouldBeDeniedOn"]},{"name":"infix fun <Resource : Any> ResourceAction<Resource>.shouldNotBeAllowedOn(resource: Resource)","description":"abakt.test.AuthPolicyPrincipalTest.shouldNotBeAllowedOn","location":"abakt-test/abakt.test/-auth-policy-principal-test/should-not-be-allowed-on.html","searchKeys":["shouldNotBeAllowedOn","infix fun <Resource : Any> ResourceAction<Resource>.shouldNotBeAllowedOn(resource: Resource)","abakt.test.AuthPolicyPrincipalTest.shouldNotBeAllowedOn"]},{"name":"infix fun Principal.shouldBeAllowed(action: ResourceAction<Resource>)","description":"abakt.test.AuthPolicyResourceTest.shouldBeAllowed","location":"abakt-test/abakt.test/-auth-policy-resource-test/should-be-allowed.html","searchKeys":["shouldBeAllowed","infix fun Principal.shouldBeAllowed(action: ResourceAction<Resource>)","abakt.test.AuthPolicyResourceTest.shouldBeAllowed"]},{"name":"infix fun Principal.shouldBeAllowed(action: ResourceAction<Resource>)","description":"abakt.test.ResourcePolicyResourceTest.shouldBeAllowed","location":"abakt-test/abakt.test/-resource-policy-resource-test/should-be-allowed.html","searchKeys":["shouldBeAllowed","infix fun Principal.shouldBeAllowed(action: ResourceAction<Resource>)","abakt.test.ResourcePolicyResourceTest.shouldBeAllowed"]},{"name":"infix fun Principal.shouldBeDenied(action: ResourceAction<Resource>)","description":"abakt.test.AuthPolicyResourceTest.shouldBeDenied","location":"abakt-test/abakt.test/-auth-policy-resource-test/should-be-denied.html","searchKeys":["shouldBeDenied","infix fun Principal.shouldBeDenied(action: ResourceAction<Resource>)","abakt.test.AuthPolicyResourceTest.shouldBeDenied"]},{"name":"infix fun Principal.shouldBeDenied(action: ResourceAction<Resource>)","description":"abakt.test.ResourcePolicyResourceTest.shouldBeDenied","location":"abakt-test/abakt.test/-resource-policy-resource-test/should-be-denied.html","searchKeys":["shouldBeDenied","infix fun Principal.shouldBeDenied(action: ResourceAction<Resource>)","abakt.test.ResourcePolicyResourceTest.shouldBeDenied"]},{"name":"infix fun Principal.shouldNotBeAllowed(action: ResourceAction<Resource>)","description":"abakt.test.AuthPolicyResourceTest.shouldNotBeAllowed","location":"abakt-test/abakt.test/-auth-policy-resource-test/should-not-be-allowed.html","searchKeys":["shouldNotBeAllowed","infix fun Principal.shouldNotBeAllowed(action: ResourceAction<Resource>)","abakt.test.AuthPolicyResourceTest.shouldNotBeAllowed"]},{"name":"infix fun Principal.shouldNotBeAllowed(action: ResourceAction<Resource>)","description":"abakt.test.ResourcePolicyResourceTest.shouldNotBeAllowed","location":"abakt-test/abakt.test/-resource-policy-resource-test/should-not-be-allowed.html","searchKeys":["shouldNotBeAllowed","infix fun Principal.shouldNotBeAllowed(action: ResourceAction<Resource>)","abakt.test.ResourcePolicyResourceTest.shouldNotBeAllowed"]},{"name":"infix fun ResourceAction<Resource>.shouldBeAllowedOn(resource: Resource)","description":"abakt.test.ResourcePolicyPrincipalTest.shouldBeAllowedOn","location":"abakt-test/abakt.test/-resource-policy-principal-test/should-be-allowed-on.html","searchKeys":["shouldBeAllowedOn","infix fun ResourceAction<Resource>.shouldBeAllowedOn(resource: Resource)","abakt.test.ResourcePolicyPrincipalTest.shouldBeAllowedOn"]},{"name":"infix fun ResourceAction<Resource>.shouldBeDeniedOn(resource: Resource)","description":"abakt.test.ResourcePolicyPrincipalTest.shouldBeDeniedOn","location":"abakt-test/abakt.test/-resource-policy-principal-test/should-be-denied-on.html","searchKeys":["shouldBeDeniedOn","infix fun ResourceAction<Resource>.shouldBeDeniedOn(resource: Resource)","abakt.test.ResourcePolicyPrincipalTest.shouldBeDeniedOn"]},{"name":"infix fun ResourceAction<Resource>.shouldNotBeAllowedOn(resource: Resource)","description":"abakt.test.ResourcePolicyPrincipalTest.shouldNotBeAllowedOn","location":"abakt-test/abakt.test/-resource-policy-principal-test/should-not-be-allowed-on.html","searchKeys":["shouldNotBeAllowedOn","infix fun ResourceAction<Resource>.shouldNotBeAllowedOn(resource: Resource)","abakt.test.ResourcePolicyPrincipalTest.shouldNotBeAllowedOn"]}]